plugins {
    id 'net.researchgate.release' version '2.3.5'
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'distribution'

sourceCompatibility = 1.8
ext {
    generatedSrcPath = "$buildDir/generatedSrc"
    userDir = file("$buildDir/run")
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = "$sourceCompatibility"
        vcs = 'Git'
    }
    module {
        excludeDirs = [file(".gradle")]
        ["classes", "dependency-cache", "libs", "reports", "resources", "test-results", "tmp"].each {
            excludeDirs << file("$buildDir/$it")
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.ant:ant:1.9.6'
    compile 'commons-io:commons-io:2.4'
    testCompile 'org.assertj:assertj-core:3.3.0'
}

configurations {
    tools
    tools.extendsFrom compile
}

sourceSets {
    tools {
        output.classesDir = "$buildDir/classes/test"
        java {
            srcDirs = ["$projectDir/src/test/java"]
            include '**/test/tools/*.java'
        }
        compileClasspath += configurations.compile
    }
    test {
        java {
            srcDirs = ["$projectDir/src/test/java", generatedSrcPath]
            exclude '**/test/tools/*.java'
        }
        compileClasspath += configurations.tools + files("$buildDir/classes/test")
    }
}

task sourceJar(type: Jar) {
    description = 'Builds a source jar artifact'
    classifier = 'sources'
    from sourceSets.main.java
}
build.dependsOn sourceJar

task tcg {
    def outputDir = file(generatedSrcPath)
    outputs.dir outputDir
    doFirst {
        outputDir.exists() || outputDir.mkdirs()
        javaexec {
            main = 'org.grandtestauto.test.tools.TestDataClassGenerator'
            maxHeapSize = "384m"
            classpath = project.sourceSets.main.compileClasspath + project.sourceSets.tools.compileClasspath + project.sourceSets.tools.output
            args = ["$outputDir", "org.grandtestauto.test.dataconstants", "$projectDir/src/test/resources"]
        }
    }
}
tcg.dependsOn compileToolsJava
compileTestJava.dependsOn compileToolsJava, tcg

task gta {
    doFirst {
        def classesRoot = new File(userDir, "testtemp/classesroot/.")
        def prod = new File(userDir, "testtemp2/prod/.")
        def tests = new File(userDir, "testtemp2/tests/.")

        userDir.exists() || userDir.mkdirs()
        classesRoot.exists() || classesRoot.mkdirs()
        prod.exists() || prod.mkdirs()
        tests.exists() || tests.mkdirs()

        javaexec {
            main = 'org.grandtestauto.GrandTestAuto'
            maxHeapSize = "384m"
            classpath = project.sourceSets.test.runtimeClasspath + files(classesRoot, prod, tests)
            args = ['GTARunAll.txt']
            systemProperties = [
                    'TestDataRoot': "$buildDir/resources/test",
                    'user.dir'    : "$buildDir/run"
            ]
        }
    }
}
gta.dependsOn testClasses
test.dependsOn gta

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}